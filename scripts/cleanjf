#!/usr/bin/env python3
'''
Remove auto-created files.
These files may make sense on one platform but not the others

As of now, I don't see any need to have an option to support
a user-specified config file. So I don't add this feature.
If need be, we can add this in the future.
'''

import argparse
import json
import os
import shutil
import sys

CONFIG = 'config/cleanjf.json'

def load_config( verbose=False ):
    '''Load the configuration file'''
    script_path = os.path.realpath( os.path.dirname( __file__ ) )
    config_path = os.path.join( script_path, CONFIG )

    junk_file_list = None
    try:
        with open( config_path, encoding="utf-8" ) as config_file:
            if verbose:
                print( f'Loading config file: {config_path}' )
            config_data = json.load( config_file )
            junk_file_list = config_data.get( 'filelist', None )
    except FileNotFoundError:
        # Error code : https://tldp.org/LDP/abs/html/exitcodes.html
        print( f'{config_path} not found' )
        sys.exit( 1 )

    return junk_file_list

def process_file( junk_file_list, filename, verbose=False):
    '''
    Delete junk files (mac os).
    Return True if deleted; otherwise, False
    '''

    # Extract only the filename or directory name from the absolute path
    basename = os.path.basename( filename )
    if basename in junk_file_list:
        if os.path.isdir( filename ):
            shutil.rmtree( filename )
        else:
            os.remove( filename )

        if verbose:
            print( f'Removed {basename}' )

        return True

    return False

def main():
    '''The main function'''
    parser = argparse.ArgumentParser( description='Remove all junk files' )
    parser.add_argument( '-v', '--verbose', action='store_true', dest='verbose',
                         help='Print log messages' )
    parser.add_argument( 'folder', action='store', help='Folder to be cleaned' )

    args = parser.parse_args()
    junk_file_list = load_config( args.verbose )

    # Walk the directory tree. It is actually a tuple of ( root, dirs, files )
    # But we don't use dirs here.
    for root, _, files in os.walk( args.folder, topdown=False ):
        for file in files:
            filename = os.path.join( root, file )
            process_file( junk_file_list, filename, verbose=args.verbose )

if __name__ == '__main__':
    main()
