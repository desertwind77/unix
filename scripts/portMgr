#!/usr/local/bin/python3
import getopt
import os
import re
import shutil
import sys
import iptcinfo3
# This is from pillow package
from PIL import Image

portfolioLocation = "/Volumes/G-RAID/Photo/Portfolio"
gdriveLocation = "/Users/athichart/Google Drive/Portfolio"
photoFrameFamily = "/Volumes/Public/My Photo/Photo Frame/Family"
photoFramePortfolio = "/Volumes/Public/My Photo/Photo Frame/Portfolio"

FolderList1 = [ 'Full', 'PSD', 'Web' ]
FolderList2 = [ 'Full', 'Web' ]
portfolio = {
        'Abstract' : {
            'name' : 'Abstract',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Astrophotography' : {
            'name' : 'Astrophotography',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Black And White' : {
            'name' : 'Black And White',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Bon Appetit' : {
            'name' : None,
            'folder' : FolderList2, 'photoFrame' : None, },
        'Buddha' : {
            'name' : None,
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Digital Painting' : {
            'name' : 'Digital Painting',
            'folder' : FolderList1, 'photoFrame' : None, },
        'Infrared' : {
            'name' : 'Infrared',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Landscape' : {
            'name' : 'Landscape',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'My Family' : {
            'name' : 'Family',
            'folder' : FolderList1, 'photoFrame' : photoFrameFamily, },
        'My Friends' : {
            'name' : 'Friends',
            'folder' :FolderList1, 'photoFrame' : None, },
        'My Love' : {
            'name' : 'My Love',
            'folder' : FolderList1, 'photoFrame' : photoFrameFamily, },
        'Myself' : {
            'name' : 'Myself',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Nature' : {
            'name' : 'Nature',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Panorama' : {
            'name' : 'Panorama',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Portrait' : {
            'name' : 'Portrait',
            'folder' : FolderList1, 'photoFrame' : None, },
        'Random Things Around Me' : {
            'name' : 'Misc',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'San Francisco' : {
            'name' : 'San Francisco',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Thailand' : {
            'name' : 'Thailand',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Travel' : {
            'name' : 'Travel',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
        'Wild Life' : {
            'name' : 'Wild Life',
            'folder' : FolderList1, 'photoFrame' : photoFramePortfolio, },
}
debugLevel = 0
doNotCopy = False
nextIndex = {}

def ignoreAutoFilename( portFolder ):
    if portfolio[ portFolder ][ 'name' ] is None:
        return True
    return False

def t0( *args ):
    if debugLevel >= 0:
        for i in args:
            print( i, end='')
        print()

def t1( *args ):
    if debugLevel >= 1:
        for i in args:
            print( i, end='')
        print()

# Get keyword from iptc of the file
def getKeywords( filename ):
    im = Image.open( filename )
    im.verify()
    if im.format == 'JPEG':
        try:
            iptc = iptcinfo3.IPTCInfo( filename )
            image_tags = iptc[ 'keywords' ]
            if isinstance( image_tags, list ):
                image_tags = [ i.decode() if isinstance( i, bytes ) else i for i in image_tags ]
            elif isinstance( image_tags, bytes ):
                image_tags = image_tags.decode()
            return image_tags
        except Exception as e:
            if str( e ) != "No IPTC data found.":
                raise
    return None

# Return all files in the folder
def listFiles( folder ):
    if not os.path.exists( folder ):
        t0( "folder %s doesn't exist" % folder )
        sys.exit( 1 )
    else:
        return sorted( [ name for name in os.listdir( folder )
                         if name[ 0 ] != '.' and
                            os.path.isfile( folder + "/" + name ) ] )

class List( object ):
    def __init__( self, name, files ):
        self.name = name
        self.files = sorted( files )
    def __eq__( self, other ):
        if len( self.files ) != len( other.files ):
            t0( 'Length mismatch' )
            return False
        for i in range( len( self.files ) ):
            x = self.files[ i ].split( '.' )[ 0 ]
            y = other.files[ i ].split( '.' )[ 0 ]
            if x != y:
                t0( 'List contents mismtach' )
                return False
        return True
    def __str__( self ):
        return '%s : [%s]' % ( self.name, ', '.join( self.files ) )

# Check that all folders in FolderList have the same file
def sanityCheckFolder( portFolder ):
    folderList = portfolio[ portFolder ][ 'folder' ]
    fileLists = []
    for f in folderList:
        path = "%s/%s/%s" % ( portfolioLocation, portFolder, f )
        fileLists.append( List( f, listFiles( path ) ) )

    for i in range( len( fileLists ) - 1 ):
        if fileLists[ i ] != fileLists[ i+1 ]:
            print( fileLists[ i ] )
            print( fileLists[ i+1 ] )
            return False
    return True

def sanityCheckPortfolio():
    for portFolder in sorted( portfolio.keys() ):
        t1( 'Checking ', portFolder )
        if not sanityCheckFolder( portFolder ):
            raise Exception( "Sanity check failed for %s in Portfolio" % portFolder )

def getNextIndex( path ):
    files = sorted( listFiles( path ) )
    if files:
        lastFile = files[ -1 ]
        searchObj = re.search( r'[a-zA-Z\s]+(\d+)\.[psb|psd|jpg]', lastFile )
        assert searchObj
        index = int( searchObj.group( 1 ) ) + 1
    else:
        index = 1
    return index

def determineNextIndex():
    t0( 'Portfolio Next Index:' )
    for portFolder in sorted( portfolio.keys() ):
        if ignoreAutoFilename( portFolder):
            continue
        folderList = portfolio[ portFolder ][ 'folder' ]
        assert folderList
        path = "%s/%s/%s" % ( portfolioLocation, portFolder, folderList[ 0 ] )
        nextIndex[ portFolder ] =  getNextIndex( path )
        t0( '%s %d' % ( portFolder, nextIndex[ portFolder ] ) )
    t0()

# expect root directory e.g. "2015-10-04 Tmp" here
def copyFilesToPortfolio( src ):
    def doCopy( absSrc, absDst ):
        t0( "copy %s to %s" % ( absSrc, absDst ) )
        if not doNotCopy:
            shutil.copyfile( absSrc, absDst )

    webPath = "%s/%s" % ( src, 'Web' )
    filelist = listFiles( webPath )
    for f in filelist:
        absFilePath = "%s/%s" % ( webPath, f )
        keywords = getKeywords( absFilePath )
        if not keywords:
           t0( 'No keyword on %s' % ( f ) )
           continue
        tag = keywords[ 0 ]
        if tag == 'Ignored':
            t0( 'Skipping %s because of tag = %s\n' % ( f, tag ) )
            continue

        t0( "[%s]   %s (copy = %s)" % ( tag, f, 'False' if doNotCopy else 'True' ) )

        index = None
        if not ignoreAutoFilename( tag ):
            index = nextIndex[ tag ]
            nextIndex[ tag ] = index+1

        for folder in portfolio[ tag ][ 'folder' ]:
            srcFile = "%s/%s/%s" % (src, folder, f )

            # Determine the destination filename
            dstFilename = f
            if not ignoreAutoFilename( tag ):
                name = portfolio[ tag ][ 'name' ]
                dstFilename = '%s %03d.jpg' % ( name, index )
            dstFile = "%s/%s/%s/%s" % ( portfolioLocation, tag, folder, dstFilename )
            gdriveFile = "%s/%s/%s" % ( gdriveLocation, tag, dstFilename )
            photoFrameFile = None
            photoFrameLocation = portfolio[ tag ].get( 'photoFrame' )
            if photoFrameLocation:
                photoFrameFile = "%s/%s/%s" % ( photoFrameLocation, tag, dstFilename )

            if folder == 'PSD':
                if os.path.exists( srcFile.replace( '.jpg', '.psd' ) ):
                    ext = '.psd'
                elif os.path.exists( srcFile.replace( '.jpg', '.psb' ) ):
                    ext = '.psb'
                elif os.path.exists( srcFile.replace( '.jpg', '.tif' ) ):
                    ext = '.tif'
                else:
                    assert 0

                srcFile = srcFile.replace( '.jpg', ext )
                dstFile = dstFile.replace( '.jpg', ext )

            doCopy( srcFile, dstFile )

            if folder == 'Web':
                doCopy( srcFile, gdriveFile )
            elif folder == 'Full':
                if photoFrameFile:
                    doCopy( srcFile, photoFrameFile )
        t0()

def usage():
    t0( "usage: %s <Folder>" % sys.argv[ 0 ] )
    t0( " options:" )
    t0( "     -d, --dry-run\t\t\tDry run (No actual copy)" )
    sys.exit( 1 )

def main( argv ):
    global doNotCopy

    try:
        opts, args = getopt.getopt( argv, "hd", [ "dry-run" ] )
    except getopt.GetoptError:
        usage()

    if len( args ) < 1:
        usage()

    # Process options
    for opt, arg in opts:
        if opt == '-h':
            usage()
        elif opt in ( '-d', '--dry-run' ):
            doNotCopy = True

    # Print the list of directoriees to be processed
    t1( 'Directories to be processed:' )
    for d in args:
        t1( d )
    t1()

    for src in args:
        # We could optimize this. But I am lazy so I choose to
        # skip for now.
        sanityCheckPortfolio()
        determineNextIndex()

        t0( 'Processing', src )
        copyFilesToPortfolio( src )

if __name__ == "__main__":
    main( sys.argv[ 1: ] )
