#!/usr/bin/env python
# mvx is a tool to rename file
# 1) Incremental mode : destination = prefix + autoincremented number + suffix
# 2) Regex mode : match the input filename and the output filename with regular expressions
# 3) Tag mode : rename the filename based on the tag if the file is audio and tags are available
#
# Note:
# - <title*> will call python string.title() to capitalize automatically
#   It would be better to move to string.capwords() which is available
#   only in python 3.x
#
# Tools:
# https://regex101.com/ is for testing regex
#
# TODO:
# - Support for non-unicode and international characters esp Thai and Chinese
# - Correct file order namely sort() in python will give the output [ 'str 1', 'str 11', 'str 2']
#   but what i want is [ 'str 1', 'str 2', 'str 11' ]
# - Option to skip dir, only dir, recursive etc

import argparse
import os
import re
import sys

# My own library
from audiolib import isSupportedFormat, createFileInfo
from debuglib import setDebugLevel, t0, t1, t2
from filelib import deleteJunkFiles, folderExists, moveFile
from regexlib import regexReplace, regexRename

logMsg = """Count       : %d
source      : %s
destination : %s
"""
logFilename = 'mvx.log'

incRenameTests = [
    { 'id' : 1,
      'filename' : 'anyname.anyext',
      'prefix' : None,
      'index' : 0,
      'suffix' : None,
      'padding' : 1,
      'newName' : '0.anyext', },
    { 'id' : 2,
      'filename' : 'anyname.anyext',
      'prefix' : 'prefix ',
      'index' : 3,
      'suffix' : ' suffix',
      'padding' : 3,
      'newName' : 'prefix 003 suffix.anyext', },
    { 'id' : 2,
      'filename' : 'anyname.anyext',
      'prefix' : 'prefix ',
      'index' : 3,
      'suffix' : ' suffix',
      'padding' : None,
      'newName' : 'prefix 3 suffix.anyext', },
]

regexRenameTests = [
    { 'id' : 1,
      'filename' : 'Cher - Believe.flac',
      'src' : '<artist> - <title>',
      'dst' : '<title> - <artist>',
      'newName' : 'Believe - Cher.flac' },
    { 'id' : 2,
      'filename' : 'xxx.flac',
      'src' : '<artist> - <title>',
      'dst' : '<title> - <artist>',
      'newName' : None },
]

def testIncRenameTests():
    for t in incRenameTests:
        newName = indexRename( t['filename'], t['prefix'], t['index'], t['suffix'],
                               t['padding'], dryRun=True )
        assert newName == t['newName']

def testRegexRenameTests():
    for t in regexRenameTests:
        newName = regexMatchRename( t['filename'], t['src'], t['dst'], dryRun=True )
        assert newName == t['newName']

def test():
    testIncRenameTests()
    testRegexRenameTests()

def indexRename( filename, prefix=None, index=None, suffix=None, padding=None, dryRun=False ):
    assert not index is None

    name, ext = os.path.splitext( filename )
    newName = ''
    if prefix:
        newName += prefix
    if padding:
        newName += str( index ).zfill( padding )
    else:
        newName += ( '%d' % index )
    if suffix:
        newName += suffix
    newName += ext

    moveFile( filename, newName, dryRun )
    return newName

def tagRename( filename, regex=None, preset=None, dryRun=False ):
    def getAllTags( filename ):
        fileInfo = createFileInfo( filename )

        supportedTags = [ 'artist', 'album', 'disc', 'title', 'track' ]
        tagDict = {}
        for t in supportedTags:
            tagDict[ t.lower() ] = fileInfo.getTag( t )
        return tagDict

    # Either regex or preset are required. Argparse makes them
    # mutually exclusive.
    assert regex or ( not preset is None )
    if preset == 0:
        regex = "<track> <title>"
    elif preset == 1:
        regex = "<artist> <title>"
    regex = regex.lower()

    if not isSupportedFormat( filename ):
        t1( "Warning : %s skipped renaming %s (unsuported format)" % \
                ( tagRename.__name__, filename ) )
        return None

    tagDict = getAllTags( filename )
    t1( 'tagDict :', tagDict )
    processedRegex = regexReplace( regex, tagDict )
    if not processedRegex:
        t1( "Warning : %s skipped renaming %s (tags are not available)" % \
                ( tagRename.__name__, filename ) )
        return None
    _, ext = os.path.splitext( filename )
    newName = "%s%s" % ( processedRegex, ext )
    moveFile( filename, newName, dryRun )

    return newName

def regexMatchRename( filename, srcRegex, dstRegex, dryRun=False ):
    name, ext = os.path.splitext( filename )
    newName = regexRename( srcRegex, dstRegex, name )
    if not newName:
        t1( 'Warning : %s skipped renaming %s (regex lookup failed)' % \
                ( regexMatchRename.__name__, filename ) )
        return None
    newName = '%s%s' % ( newName, ext )
    moveFile( filename, newName, dryRun )

    return newName

def processFile( args, filename, count=None, numFiles=None, logfile=None ):
    if args.command == 'tag':
        newName = tagRename( filename, regex=args.regex, preset=args.preset,
                dryRun=args.dryRun )
    elif args.command == 'regex':
        newName = regexMatchRename( filename, args.src, args.dst,
                dryRun=args.dryRun )
    elif args.command == 'inc':
        if args.padding:
            padding = args.padding
        else:
            padding = findPadding( numFiles )
        newName = indexRename( filename, prefix=args.prefix, index=count,
                suffix=args.suffix, padding=padding, dryRun=args.dryRun )

    if newName:
        txt = logMsg % ( count, filename, newName )
        t0( txt )
        if logfile:
            logfile.write( txt )
            logfile.write( '\n' )

def findPadding( num ):
    count = 0
    while num != 0:
        num /= 10
        count += 1
    return count

def processFolder( args ):
    assert folderExists( args.path )

    logfile = None
    if not args.dryRun and not args.noLogging:
        logfile = open( logFilename, 'w+' )

    count = 0
    if args.command == 'inc' and args.index:
        count += args.index

    currentPwd = os.getcwd();
    os.chdir( args.path )
    allFiles = sorted( os.listdir( '.' ) )
    numFiles = len( allFiles )
    for filename in allFiles:
        if deleteJunkFiles( filename, [ logFilename ] ):
            continue
        processFile( args, filename, count=count, numFiles=numFiles , logfile=logfile )
        count += 1
    os.chdir( currentPwd )

def main( argv ):
    parser = argparse.ArgumentParser( version='0.2',
                                      description='mvx argument parser' ) 
    parser.add_argument( '-X', '--dry-run', action='store_true', dest='dryRun',
            help='Only dry run, no change is made to any files' )
    parser.add_argument( '-L', '--no-loggin', action='store_true', dest='noLogging',
            help='Turn off logging into mvx.log (Not recommended)' )
    parser.add_argument( '-B', '--debugLevel', action='store', dest='debugLevel',
            type=int, help='Set debug level' )

    subparsers = parser.add_subparsers( dest='command' )
    subparsers.required = True

    regex_parser = subparsers.add_parser( 'regex',
            help='Rename files by using src regex and dst regex' )
    regex_parser.add_argument( '-s', '--src', action='store', dest='src',
            help='Regex for source')
    regex_parser.add_argument( '-d', '--dst', action='store', dest='dst',
            help='Regex for destination')
    regex_parser.add_argument( 'path', action='store',
            help='File or folder containing the files to be renamed' )

    inc_parser = subparsers.add_parser( 'inc',
            help='Rename files by using incremental sequnence number' ) 
    inc_parser.add_argument( '-p', '--prefix', action='store', dest='prefix',
            help='Prefix of the destination')
    inc_parser.add_argument( '-s', '--suffix', action='store', dest='suffix',
            help='Suffix of the destination')
    inc_parser.add_argument( '-i', '--index', action='store', dest='index',
            type=int, default=1, help='The initial sequence number')
    inc_parser.add_argument( '-d', '--padding', action='store', dest='padding',
            type=int, default=2, help='Number of digit in file index')
    inc_parser.add_argument( 'path', action='store',
            help='Folder containing files to be renamed')

    tag_parser = subparsers.add_parser( 'tag',
            help='Rename supported audio files by using regex and tags' )
    tag_regex_group = tag_parser.add_mutually_exclusive_group()
    tag_regex_group.add_argument( '-r', '--regex', action='store', dest='regex',
            help='Regex for the destination filename')
    tag_regex_group.add_argument( '-p', '--preset', action='store', dest='preset',
            type=int, help='Preset for regex : 0 for <track> <title>, 1 for <artist> <title>' )
    tag_parser.add_argument( 'path', action='store',
            help='File or folder containing the files to be renamed' )

    test_parser = subparsers.add_parser( 'test', help='Run sanity test on this program' )

    args = parser.parse_args()

    if args.debugLevel:
        setDebugLevel( args.debugLevel )
        t0( "Set debugLevel to ", args.debugLevel )
        t0()

    t2( 'arguments : ', args )
    t2()

    if args.command == 'test':
        test()
        return

    if folderExists( args.path ):
        processFolder( args )
    elif os.path.exists( args.path ):
        filename = args.path
        processFile( args, filename, count=0, numFiles=1 )

if __name__ == "__main__":
    main( sys.argv[ 1: ] )
