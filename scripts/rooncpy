#!/usr/bin/env python3
'''
Copy audio files to Roon library

Usage:
    1) To copy one album
        rooncpy <folder>
    2) To copy muliple albums
        rooncpy -t cd <folder1> <folder2> ...
    3) To copy a whole directory containing multiple albums
        rooncpy -d <folder>

Note that the default target is the flac directory.
'''

import argparse
import json
import os
import re
import shutil
import sys

CONFIG = 'config/rooncpy.json'
SKIPLIST = [ '.DS_Store' ]

def load_config( verbose=False ):
    '''Load the configuration file'''
    script_path = os.path.realpath( os.path.dirname( __file__ ) )
    config_path = os.path.join( script_path, CONFIG )

    config_data = None
    try:
        with open( config_path, encoding="utf-8" ) as plugin_file:
            if verbose:
                print( f'Loading config file: {config_path}' )

            config_data = json.load( plugin_file ).get( 'config' )
    except FileNotFoundError:
        print( f'{config_path} not found' )
        sys.exit( 1 )

    if not config_data:
        print( f'Invalid configuration file {config_path}' )
        sys.exit( 1 )

    return config_data

def sanity_check( config_data ):
    '''Check the directory structure of Roon storage'''
    destination = config_data.get( 'destination' )
    if not destination or not os.path.isdir( destination ):
        print( f'Unable to access {destination}' )
        sys.exit( 1 )

    targets = config_data.get( 'targets' )
    if not targets or len( targets ) == 0:
        print( '"targets" missing from the config' )
        sys.exit( 1 )

    for target in targets:
        cur_dir = os.path.join( destination, target )
        if not os.path.isdir( cur_dir ):
            print( f'{cur_dir} not found' )
            sys.exit( 1 )

def copy_files( src, dst, prefix=None, verbose=False, dry_run=False ):
    '''Copy src to dst'''
    real_src = os.path.join( prefix, src ) if prefix else src
    if not os.path.isdir( real_src ):
        print( f'The source {src} not found' )
        sys.exit( 1 )
    elif not os.path.isdir( dst ):
        print( f'The destination {dst} not found' )
        sys.exit( 1 )

    # We expect the source to be in the format "Artist - Album"
    # Note that we use (.*?) to force non-greedy match the artist.
    obj = re.match( r'(.*?) - (.*)', src )
    if not obj:
        print( f'Unable to recognize the format of {src}' )
        sys.exit( 1 )
    artist = obj.group( 1 )
    #album = obj.group( 2 )

    final_target = None
    various_artists = 'Various Artists'
    if artist == various_artists:
        # Let's not over-engineer 'Various Artists'
        final_target = os.path.join( dst, various_artists, src )
    else:
        initial = artist[ 0 ]
        final_target = os.path.join( dst, initial, artist, src )

    try:
        if verbose or dry_run:
            print( f'Copying {final_target}' )

        if not dry_run:
            shutil.copytree( real_src, final_target )
    except FileExistsError:
        print( f'Skipped {final_target}', file=sys.stderr )

def main():
    '''The main function'''
    parser = argparse.ArgumentParser(
            description='Copy audio files to Roon library' )
    parser.add_argument( '-t', '--target', action='store', dest='target',
                         default='flac',
                         help='Target directory (cd, dsd, flac, mqa)' )
    parser.add_argument( '-D', '--dry_run', action='store_true', dest='dry_run',
                         help='Dry run' )
    parser.add_argument( '-d', '--dir', action='store_true', dest='dir',
                         help='Copy each folder in the source instead' )
    parser.add_argument( '-v', '--verbose', action='store_true',
                         dest='verbose', help='Print log message' )
    parser.add_argument( 'sources', nargs='*' )

    args = parser.parse_args()
    if len( args.sources ) == 0:
        print( 'Nothing to copy' )
        sys.exit( 1 )

    config_data = load_config( args.verbose )
    sanity_check( config_data )

    destination = config_data.get( 'destination' )
    dst = os.path.join( destination, args.target )
    if args.dir:
        # We assume that all ablums that need to be copied are placed
        # in one folder. Then we can just run 'rooncpy -d <src>'.
        # This command will copy each albums residing in <src> instead
        # of treating <src> as an album. To be on the safe side, we
        # limit the number of <src> to be just one. It doesn't make sense
        # to have more than one source anyway.
        if len( args.sources ) != 1:
            print( 'With the dir option, only one source is accepted' )
            sys.exit( 1 )

        prefix = args.sources[ 0 ]
        for folder in sorted( os.listdir( prefix ) ):
            if folder in SKIPLIST:
                continue
            copy_files( folder, dst, prefix=prefix, verbose=args.verbose,
                        dry_run=args.dry_run )
    else:
        for src in sorted( args.sources ):
            copy_files( src, dst, verbose=args.verbose,
                        dry_run=args.dry_run )

if __name__ == '__main__':
    main()
