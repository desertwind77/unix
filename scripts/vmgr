#!/usr/bin/env python3
'''
vmgr : vim plugin manager for intsalling, updating
and uninstalling vim plugins
'''
# Install, uninstall, or update vim plugins listed in vim_plugin.json

from datetime import datetime
import argparse
import json
import os
import shutil
import subprocess
import sys
# pylint: disable=import-error
from colorama import Fore, Style

GIT_REPO = '.git'
PLUGIN_FILENAME = 'config/vmgr.json'
PLUGIN_INFO = None
PLUGIN_BASE = None
PLUGIN_DIR = None
FORCE = False

def load_config():
    '''Load the plugin configuration'''

    # __file__ stores the absolute path of the python script
    # realpath() return the canonical path of the specified
    # filename by eliminating any symbolic links encountered
    # in the path
    script_path = os.path.realpath( os.path.dirname( __file__ ) )
    plugin_path = os.path.join( script_path, PLUGIN_FILENAME )

    # A formatted string literal or f-string is a string literal
    # that is prefixed with 'f' or 'F'. These strings may contain
    # replacement fields, which are expressions delimited by curly
    # braces {}. While other string literals always have a constant
    # value, formatted strings are really expressions evaluated
    # at run time.

    plugin_info = plugin_base = plugin_dir = None
    try:
        with open( plugin_path, encoding="utf-8" ) as plugin_file:
            print( f'Loading config file: {plugin_path}' )
            plugin_data = json.load( plugin_file )
            plugin_info = plugin_data[ 'PluginInfo']
            plugin_base = plugin_data[ 'InstallInfo' ][ 'PluginBase' ]
            plugin_dir = plugin_data[ 'InstallInfo' ][ 'PluginDir' ]
    except FileNotFoundError:
        # Error code : https://tldp.org/LDP/abs/html/exitcodes.html
        print( f'{plugin_path} not found' )
        sys.exit( 1 )

    return plugin_info, plugin_base, plugin_dir

def install_plugin():
    '''Install all the plugins'''

    assert PLUGIN_BASE and PLUGIN_DIR

    full_plugin_dir = os.path.join( PLUGIN_BASE, PLUGIN_DIR )
    if not os.path.isdir( full_plugin_dir ) or FORCE:
        # pylint: disable=fixme
        # TODO : test this
        if FORCE:
            shutil.rmtree( full_plugin_dir )
        # os.makedirs() create a directory recursively while os.mkdir()
        # does not do recursively
        os.makedirs( full_plugin_dir )

    current_dir = os.getcwd()
    os.chdir( PLUGIN_BASE )

    # Initalize git repository
    if not os.path.isdir( GIT_REPO ):
        cmd = [ 'git', 'init' ]
        try:
            subprocess.run( cmd, stdout=subprocess.DEVNULL, check=True )
        except subprocess.CalledProcessError:
            print( 'Unable to initialize the git repository' )
            return

    # Install each plugin
    for name, data in PLUGIN_INFO.items():
        url = data[ 'URL' ]
        enable = ( data[ 'Enable' ] == 'True' )
        des = os.path.join( PLUGIN_DIR, name )

        if not enable or os.path.isdir( des ):
            print( f'Skipped {name}' )
            continue

        cmd = [ 'git', 'submodule', 'add', url, des ]
        try:
            subprocess.run( cmd, stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL, check=True )
        except subprocess.CalledProcessError:
            print( f'Unable to install {name} with command:' )
            print( f'   {cmd}' )
            continue
        print( f'Installed {name}' )

    cmd = [ 'git', 'commit', '-m', 'Vim plugin installation' ]
    try:
        subprocess.run( cmd, stdout=subprocess.DEVNULL, check=True )
    except subprocess.CalledProcessError:
        pass

    os.chdir( current_dir )

def uninstall_plugin( name ):
    '''Uninstall a specific plugin'''

    assert PLUGIN_BASE and PLUGIN_DIR

    current_dir = os.getcwd()
    if not os.path.isdir( PLUGIN_BASE ):
        print( f'The directory {PLUGIN_BASE} is not found' )
        return
    os.chdir( PLUGIN_BASE )

    des = os.path.join( PLUGIN_DIR, name )
    if not os.path.isdir( des ):
        print( f'{name} is not installed' )
        return

    cmds = [
            [ 'git', 'submodule', 'deinit', '--force', des ],
            [ 'git', 'rm', des ],
            [ 'git', 'commit', '-m', f'Removing {name}' ],
    ]

    for cmd in cmds:
        try:
            subprocess.run( cmd, stdout=subprocess.DEVNULL, check=True )
        except subprocess.CalledProcessError:
            print( f'Fatal error in uninstalling {name}' )
            print( f'   {cmd}' )
            os.chdir( current_dir )
            return

    git_dest = os.path.join ( GIT_REPO, 'modules', des )
    shutil.rmtree( git_dest )

    os.chdir( current_dir )

def update_plugin():
    '''Update all the plugins'''

    assert PLUGIN_BASE and PLUGIN_DIR

    current_dir = os.getcwd()
    if not os.path.isdir( PLUGIN_BASE ):
        print( f'The directory {PLUGIN_BASE} is not found' )
        return
    os.chdir( PLUGIN_BASE )

    now = datetime.now()
    datetime_string = now.strftime( "%d/%m/%Y %H:%M:%S" )

    # Running either of these commands
    #     git submodule update --remote --merge
    #     git submodule update --init --recursive
    cmd = [ 'git', 'submodule', 'update', '--remote', '--merge' ]
    try:
        subprocess.run( cmd, stdout=subprocess.DEVNULL, check=True )
    except subprocess.CalledProcessError:
        print( 'Fatal error in updating plugins' )
        os.chdir( current_dir )
        return

    cmd = [ 'git', 'commit', '-a', '-m',
            f'"[{datetime_string}] Updating plugin"' ]
    try:
        subprocess.run( cmd, stdout=subprocess.DEVNULL, check=True )
    except subprocess.CalledProcessError:
        # Suppressing the exception on purpose because git commit may
        # return a non-zero code when there is nothing to commit.
        pass

    os.chdir( current_dir )

if __name__ == '__main__':
    parser = argparse.ArgumentParser( description='vim plugin manager' )
    subparser = parser.add_subparsers( dest='command' )
    subparser.required = True

    subparser.add_parser( 'install', help='Install all vim plugins' )
    subparser.add_parser( 'update', help='update all vim plugins' )

    uninstallParser = subparser.add_parser( 'uninstall',
                                            help='uninstall vim plugin' )
    uninstallParser.add_argument( 'name', action='store',
                                  help='plugin to be uninstalled' )

    args = parser.parse_args()

    PLUGIN_INFO, PLUGIN_BASE, PLUGIN_DIR = load_config()

    if args.command == 'install':
        install_plugin()
    elif args.command == 'uninstall':
        uninstall_plugin( args.name )
    elif args.command == 'update':
        update_plugin()

    print( f'{Fore.GREEN}Success{Style.RESET_ALL}' )
