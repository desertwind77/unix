Buffer / Window / Tab
---------------------
1) Tab
:tabedit {file}         edit the {file} in a newtab
:tabfind {file}         search the path and open {file} in a new tab
:tab drop {file}        jump to a window/tab containing the file if exists or open {file} in a new tab
:tab split              copy the current window to a new tab
:tabclose               close current tab
:tabclose {i}           close i-th tab
:tabonly                close all other tabs (show only the current tab)
:tab ball               show each buffer in a tab (up to 'tabpagemax' tabs)
:tab help               open help in a new tab
:tabs                   show all tabs

:tabn {tabno}           go to the next tab or {tabno}
:tabp                   go to the prev tab
:tabfirst               go to the first tab
:tablast                go to the last tab
:tabm 0                 move current tab to first
:tabm                   move current tab to last
:tabm {i}               move current tab to position i+1

In normal mode:
{count}gt               go to {count} tab
gt                      go to next tab
gT                      go to previous tab
{i}gt                   go to tab in position i

:set path=.,,**         for :tabfind to search for files ( . =)
                        . = the directory containing the file
                        <empty> = the current directory (empty text b/w commas)
                        ** = the directory under the current directory

2) Window
:new                    create a new window
Ctrl-W v or :vsplit     split window veritcally
Ctrl-W s or :split      split windowi horizontally
Ctrl-W o                make the current window the only one on screen and close all others
Ctrl-W w                move cursor to other window
Ctrl-W h                move cursor left
Ctrl-W l                move cursor right
Ctrl-W j                move cursor down
Ctrl-W k                move cursor up
:vertical sb 3          split vertically and show buffer 3 on the left
:vertical rightbelow sfind file.txt
                        split vertically and show file.txt on the right
:rightbelow sfind file.txt
                        split horizontally and show file.txt in the bottom

3) Buffer
:new                    open an empty buffer
:ls, :buffers           list all the buffer
:bnext, :bn             go to the next buffer
:bprev, :bp             go to the previous buffer
:b<num>                 jump to the buffer <num> shown in :ls or :buffers
:b<filename>            jump to the buffer <filename>
:bd <num>	            delete the current buffer or <num>
:bd!	                  delete the current buffer and discard any changes
:Ctrl-o, Ctrl-i         jump history
Ctrl-^                  toggle between the current and the last buffer

4) Misc
Ctrl-W z, Ctrl-W Ctrl-Z :pc[lose][!]   close the preview window
:!                                     run the last external command
:!!                                    repeat the last command
:!<linux command>                      run linux command
:silent !<commad>                      eliminate the need to hit enter after the command is done
:r!<linux command>                     run linux command and copy the result to a bufffer
:vimgrep /0$/ example.txt	search for lines ending with 0 in file example.txt
:cwin	open quickfix window (window 4)
:help quickfix	open help (window 1)

5) CtrlP plugin
:CtrlP [starting dir]      invoke CtrlP in find file mode
:CtrlPBuffer or :CtrlPMRU  invoke CtrlP in find buffer/MRU mode
:CtrlPMixed                search in Files, Buffers and MRU files at the same time
<C-p> in normal mode       invoke CtrlPMixed
<C-p> in insert mode       spelling suggestion

Once CtrlP is open:
<F5>                       purge the cache and reload the current directory
<C-d>                      switch to filename-only search instead of full path
<C-r>                      switch to regexp mode
<C-f> and <C-b>            cycle between mode
<C-j>, <C-k>, Up, Down     navigate the result list

Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
Use <c-y> to create a new file and its parent directories.
Use <c-z> to mark/unmark multiple files and <c-o> to open them.

6) Misc
- Wrap existing text at 80 characters
  > Set the textwidth to 80
     :set textwidth=80
  > Apply automatically within certain file types like Markdown
     au BufRead,BufNewFile *.md setlocal textwidth=80
  > Select the lines to re-format
     v
  > Reformat it
     gq

- Close the preview window or scratch
  Ctrl-w z
  Ctrl-w Ctrl-z
  :pc[lose]

- Run a terminal inside vim (from 8.1)
  :term

- Comment on a multi-line code snipplet without using nerdcommenter
  > First, go to the first line you want to comment, press Ctrl+V. This will
    put the editor in the VISUAL BLOCK mode.
  > Then using the arrow key and select until the last line.
  > Now press Shift+I, which will put the editor in INSERT mode and
    then press #
  > This will add a hash to the first line.
  > Then press Esc (give it a second), and it will insert a # character
    on all other selected lines.

- Swap windows using vim-windowswap
  > Navigate to the window you'd like to move
  > Press <leader>ww
  > Navigate to the window you'd like to swap with
  > Press <leader>ww again

- Change parentheses, brackets, quotes, HTML/XML tags using vim-surround
  Note that we have to type the command when the cursor is inside the quotes, etc
      initially      "Hello world!"
      cs"'           'Hello world!'
      cs'<p>         <p>Hello world!</p>
      cst"           "Hello world!"
      ds"            Hello world!
  When the cursor is on "Hello",
      ysiw]          [Hello] world!
      cs]{           { Hello } world!  or
      cs]}           {Hello} world!
      yssb or yss)   ({Hello} world!)
      ds{ds)         Hello world!
      ysiw<em>       <em>Hello</em> world!
  Press a capital V and $ for linewise visual mdoe
      S<p class="important"> <p class="important"><em>Hello</em> world!</p>

   The . command will work with ds, cs, and yss if you install repeat.vim.

- Exit vim from split mode or tab
   :qall! or :qa!

- Reload the file e.g. after removing the read-only permission so vim allow
  us to edit the file
   :e or :e! (discard all change)

- Scroll the vim terminal window
   To enter the normal mode which we can use with vim's normal navigation
   and search
      Ctrl-\ Ctrl-n
   To return to the terminal
      i or a
