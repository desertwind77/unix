" .vimrc (2021/02/24)
" Athichart Tangpong

" Include the system settings
if filereadable( "/etc/vimrc" )
   source /etc/vimrc
endif

" Include Arista-specific settings
if filereadable( $VIM . "/vimfiles/arista.vim" )
   source $VIM/vimfiles/arista.vim
endif

"-------------------- General setting -------------------------
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=utf-8,latin1
endif
" Set the current dir to that of the current file
"set autochdir
" Use Vim defaults (much better!)
set nocompatible
" Allow backspacing over everything in insert mode
set bs=2
" Keep a backup file
set backup
" Read/write a .viminfo file, don't store more than 50 lines of registers
set viminfo='20,\"50
" Keep 50 lines of command line history
set history=50
" Show the cursor position all the time
set ruler
" Turn on line number
set number
" Show what what the current cmd is doing
set showcmd
" The cursor will briefly jump to the matching brace when you insert one.
set showmatch
" Show mode
set showmode
" Always display the status line, even if only one window is displayed
set laststatus=2
" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files
set confirm
" Set the command window height to 2 lines to avoid many cases of having
" to press <Enter> to continue
set cmdheight=2
" Better command-line completion
set wildmenu
" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start
" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline
" Not show @ when a line is too long to fit in one line
set display+=lastline
" Enable autocompletion e.g. :color
set wildmenu
set wildmode=longest:full,full
" stop 'existing swap file' warnings
set shortmess+=A
" Diable beep
set visualbell
"set clipboard=unnamed
syntax on
" Set mouse behavior to xwindows
behave xterm
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy, which is the default
map Y y$

"------------ Spelling -----------
" Setup the dictionary to the system dictionary file
" ]s    move to the next misspelled word
" [s    move to the previous misspelled word
" z=    show suggestion
" zg    add the word to the dictionary
" zw    mark the word as incorrect
set dictionary+=/usr/share/dict/words
" Turn auto spelling off
set nospell
" Turn spelling on globally. to replace a text, move cursor over the text, and z=
"set spell spelllang=en_us
" Turn spelling on only in local buffer
"setlocal spell spelllang=en_us

"------------ Search setting ----------
" Show the next match while entering a searchEdit
set incsearch
" Highlight all search
set hlsearch
" Use case insensitve search
set ignorecase
" /copyright      Case insensitive
" /Copyright      Case sensitive
" /copyright\C    Case sensitive
" /Copyright\c    Case insensitive
set smartcase

"------------ Indentation setting --------
" Always set autoindenting on
set autoindent
" Pressing TAB indents 4 spaces
set softtabstop=3
" But a tab character '\t' is 8 spaces
set tabstop=3
" Indenting or shifting with << and >> uses 4 space incr
set shiftwidth=3
" Replace tabs with spaces
set expandtab
" Set c indentation style (I like the default style)
"set cinoptions+=:0

"---------------- Line wrap ------------------
" Enable text wrap if the line is longer than, for example, 85 columns.
" Default text wrap may break in the middle of a word. 'linebreak' will force
" the text wrap to break at the word boundary. Sometimes 'nolist' is needed
" for this to work.
"set showbreak=â€¦
set wrap linebreak nolist
" Set command :Wrap to enable this
"command! -nargs=* Wrap set wrap linebreak nolist
" Go down one line in the wrapped line
vmap <C-S-j> gj
nmap <C-S-j> gj
" Go up one line in the wrapped line
vmap <C-S-k> gk
nmap <C-S-k> gk
" Go to the beginning of the wrapped line
vmap <C-S-h> g^
nmap <C-S-h> g^
" Go to the end of the wrapped line
vmap <C-S-l> g$
nmap <C-S-l> g$

"------------- Plugins settings --------------
colorscheme molokai
if has( "gui_running" )
   colorscheme navajo
endif

let base16colorspace=256
" Enable Rainbow to display matchin parenthesises with the same color
let g:rainbow_active = 1
" Jump to the tagbar window immediately after it opens
let g:tagbar_autofocus = 1

" IndentLine config
"let g:indentLine_enabled = 1
"let g:indentLine_leadingSpaceChar = '.'
"let g:indentLine_leadingSpaceEnabled = 1
"let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 1

" '\' + l to display location list (ListToggle)
let g:lt_location_list_toggle_map = '<leader>l'
" '\' + l to display quickfix list (ListToggle)
let g:lt_quickfix_list_toggle_map = '<leader>q'

" Create default mappings
let g:NERDCreateDefaultMappings = 1
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 0
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
" Quit NerdTree after a file is opened
let g:NERDTreeQuitOnOpen=1

" Do not auto save or load session created by vim-session
let g:session_autosave = 'no'
let g:session_autoload = 'no'

" Trigger UltiSnips. Do not use <tab> if using YouCompleteMe
let g:UltiSnipsExpandTrigger = "<c-l>"
let g:UltiSnipsSnippetsDir = "~/.vim/snippets"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit = "vertical"

if has( "autocmd" )
   " detect filetype and set indentation accordingly
   filetype plugin indent on
endif

if !exists("autocommands_loaded")       " do not define autocmd twice
   let autocommands_loaded = 1
   autocmd BufRead *.txt set tw=85     " set text width to 85 col
   autocmd BufRead *.cxx set tw=85     " set text width to 85 col
   autocmd BufRead *.c set tw=85       " set text width to 85 col
   autocmd BufRead *.h set tw=85       " set text width to 85 col

   " Set proper options for C, mail and other files
   " Don't switch the order of the following two autocmds
   autocmd BufEnter * setlocal formatoptions=tcqro2n
   autocmd FileType c,cpp setlocal formatoptions=croq textwidth=0
   "autocmd FileType mail setlocal complete+=k
   "
   " To change automatically to the directory
   " the file in the current buffer is. (Vim TIP# 101)
   "autocmd BufEnter * :cd %:p:h
   "autocmd FileType c,cpp :cd %:p:h

   " Commenting blocks of code.
   autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
   autocmd FileType sh,ruby,python   let b:comment_leader = '# '
   autocmd FileType conf,fstab       let b:comment_leader = '# '
   autocmd FileType tex              let b:comment_leader = '% '
   autocmd FileType mail             let b:comment_leader = '> '
   autocmd FileType vim              let b:comment_leader = '" '

   " Align GitHub-flavored Markdown tables using the
   " vim-easy-align plugin
   au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
endif

if has('cscope')
   " Use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
   set cscopetag
   " Check cscope for definition of a symbol before checking ctags.
   " Set to 1 if you want the reverse search order.
   set csto=0
   " Show a message when a cscope databse is added. Disable this
   " to avoid the confirmation message during vim startup.
   " set cscopeverbose

   if has('quickfix')
      set cscopequickfix=s-,c-,d-,i-,t-,e-
   endif

   if filereadable( "cscope.out" )
      cs add cscope.out
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif

   " set up command-line-mode abbreviations to make cscope commands easier to type
   cnoreabbrev csa cs add
   cnoreabbrev csf cs find
   cnoreabbrev csk cs kill
   cnoreabbrev csr cs reset
   cnoreabbrev css cs show
   cnoreabbrev csh cs help

   " From https://cscope.sourceforge.net/cscope_maps.vim
   "
   " The following maps all invoke one of the following cscope search types:
   "
   "   's'   symbol: find all references to the token under cursor
   "   'g'   global: find global definition(s) of the token under cursor
   "   'c'   calls:  find all calls to the function name under cursor
   "   't'   text:   find all instances of the text under cursor
   "   'e'   egrep:  egrep search for the word under cursor
   "   'f'   file:   open the filename under cursor
   "   'i'   includes: find files that include the filename under cursor
   "   'd'   called: find functions that function under cursor calls
   "
   " Below are three sets of the maps: one set that just jumps to your
   " search result, one that splits the existing vim window horizontally and
   " diplays your search result in the new window, and one that does the same
   " thing, but does a vertical split instead (vim 6 only).
   "
   " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
   " unlikely that you need their default mappings (CTRL-\'s default use is
   " as part of CTRL-\ CTRL-N typemap, which basically just does the same
   " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
   " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
   " of these maps to use other keys.  One likely candidate is 'CTRL-_'
   " (which also maps to CTRL-/, which is easier to type).  By default it is
   " used to switch between Hebrew and English keyboard mode.
   "
   " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
   " that searches over '#include <time.h>" return only references to
   " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
   " files that contain 'time.h' as part of their name).


   " To do the first type of search, hit 'CTRL-\', followed by one of the
   " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
   " search will be displayed in the current window.  You can use CTRL-T to
   " go back to where you were before the search.
   nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
   nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
   nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
   nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
   nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
   nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
   nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
   nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

	" Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
   " makes the vim window split horizontally, with search result displayed in
   " the new window.
   "
   " (Note: earlier versions of vim may not have the :scs command, but it
   " can be simulated roughly via:
   "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
   nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
   nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

   " Hitting CTRL-space *twice* before the search type does a vertical
   " split instead of a horizontal one (vim 6 and up only)
   "
   " (Note: you may wish to put a 'set splitright' in your .vimrc
   " if you prefer the new window on the right instead of the left
   nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
   nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
   nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
   nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

   " Key map timeouts
   " By default Vim will only wait 1 second for each keystroke in a mapping.
   " You may find that too short with the above typemaps.  If so, you should
   " either turn off mapping timeouts via 'notimeout'.
   "
   "set notimeout
   "
   " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
   " with your own personal favorite value (in milliseconds):
   "
   "set timeoutlen=4000
   "
   " Either way, since mapping timeout settings by default also set the
   " timeouts for multicharacter 'keys codes' (like <F1>), you should also
   " set ttimeout and ttimeoutlen: otherwise, you will experience strange
   " delays as vim waits for a keystroke after you hit ESC (it will be
   " waiting to see if the ESC is actually part of a key code like <F1>).
   "
   "set ttimeout
   "
   " personally, I find a tenth of a second to work well for key code
   " timeouts. If you experience problems and have a slow terminal or network
   " connection, set it higher.  If you don't set ttimeoutlen, the value for
   " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
   "
   "set ttimeoutlen=100
endif

"------------- Shortcuts and Aliases ---------------
" To map the F2 key, <silent> <F2>
" To map Ctrl-s key, <C-s>

function NERDTreeToggleAndRefresh()
   :NERDTreeToggle
   if g:NERDTree.IsOpen()
      :NERDTreeRefreshRoot
   endif
endfunction

" tab navigation
nnoremap tf :tabfirst<CR>
nnoremap tp :tabprevious<CR>
nnoremap tn :tabnext<CR>
nnoremap tl :tablast<CR>
nnoremap tc :tabclose<CR>
nnoremap tn :tabnew<CR>
nnoremap te :tabedit<Space>
nnoremap tm :tabm<Space>
" Press and release Ctrl-t, then j or k to move the current tab to the left or
" the right
nnoremap <C-t>j :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <C-t>k :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>

" leadder is '\' in vim. so <leader>a means '\' + a
" toggle wrap text on/off
nnoremap <leader>a :set wrap!<CR>
" f - jump to the Tagbar window when open
" j - jump to the Tagbar window if already open
" c - autoclose
nnoremap <leader>b :TagbarOpen fjc<CR>
" show the list of opened buffers to choose from
nnoremap <leader>c :buffers<CR>:buffer<Space>
" list all the buffer
nnoremap <leader>d :ls!<CR>
" stop search highlight
nnoremap <leader>h :nohlsearch<CR>
" toggle indent line
"nnoremap <leader>i :IndentLinesToggle<CR>
nnoremap <leader>i :IndentGuidesToggle<CR>
" jump to the file brower
nnoremap <leader>n :NERDTreeFocus<CR>
" turn on spell check
nnoremap <leader>s :set spell!<CR>
" toggle the file browser
nnoremap <leader>t :call NERDTreeToggleAndRefresh()<CR>
" show undo tree
if has( 'python3' )
   let g:gundo_prefer_python3 = 1
endif
nnoremap <leader>u :GundoToggle<CR>
" remove unnecessary white spaces
nnoremap <leader>w :StripWhitespace<CR>
" Comment out the current line or text selected in visual mode.
nnoremap <leader>cc :NERDCommenterComment<CR>
" Same as cc but forces nesting.
nnoremap <leader>cn :NERDCommenterNested<CR>
" Toggles the comment state of the selected line(s). If the topmost selected line
" is commented, all selected lines are uncommented and vice versa.
nnoremap <leader>c<space> :NERDCommenterToggle<CR>
" Comments the given lines using only one set of multipart delimiters.
nnoremap <leader>cm :NERDCommenterMinimal<CR>
" Toggles the comment state of the selected line(s) individually.
nnoremap <leader>ci :NERDCommenterInvert<CR>
" Comments out the selected lines with a pretty block formatted layout.
nnoremap <leader>cs :NERDCommenterSexy<CR>
" Same as cc except that the commented line(s) are yanked first.
nnoremap <leader>cy :NERDCommenterYank<CR>
" Comments the current line from the cursor to the end of line.
nnoremap <leader>c$ :NERDCommenterToEOL<CR>
" Adds comment delimiters to the end of line and goes into insert mode between them.
nnoremap <leader>cA :NERDCommenterAppend<CR>
" Adds comment delimiters at the current cursor position and inserts between.
" Disabled by default.
" |NERDCommenterInsert|
" Switches to the alternative set of delimiters.
nnoremap <leader>ca :NERDCommenterAltDelims<CR>
" Same as |NERDCommenterComment| except that the delimiters are aligned down
" the left side (<leader>cl) or both sides (<leader>cb).
nnoremap <leader>cl :NERDCommenterAlignLeft<CR>
nnoremap <leader>cb :NERDCommenterAlignBoth<CR>
" Uncomments the selected line(s).
nnoremap <leader>cu :NERDCommenterUncomment<CR>
" Turn off line number
nnoremap <leader>nn :set number!<CR>"

" Command for vim-session
nnoremap <leader>sc :CloseSession<CR>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>so :OpenSession<CR>
nnoremap <leader>ss :SaveSession<CR>

" <leader>ww is reserved for vim-windowswap

" In normal mode, toogle paste with F2
nnoremap <F2> :set invpaste paste?<CR>
" In insert mdoe, toogle paste with F2
set pastetoggle=<F2>

" quick edit
"nnoremap <silent> <F5> :copen<CR>
" quick edit
"nnoremap <silent> <F6> :cclose<CR>

" We reset the vimrc augroup. Autocommands are added to this throughout the file.
augroup vimrc
   autocmd!
augroup END
"autocmd vimrc FileType python
"         \ setlocal expandtab |
"         \ setlocal tabstop=3 |
"         \ setlocal shiftwidth=3 |
"         \ setlocal softtabstop=3 |
"         \ setlocal shiftwidth=3 |
"         \ setlocal tw=85 |
