# We need this guard; otherwise, scp will fail.
if status is-interactive
   #---------------------- Function ---------------------
   function mkcd -d "Create a directory and set CWD"
      command mkdir $argv
      if test $status = 0
         switch $argv[ ( count $argv ) ]
            case '-*'
            case '*'
               cd $argv[ ( count $argv ) ]
               return
         end
      end
   end  # funciton

   function notify -d "Beep when the last background job finish"
      set -l job ( jobs -l -g )
      # Disabling the following line; otherwise, this function will not work
      #or begin; echo "There are no jobs" >&2; return 1; end

      function _notify_job_$job --on-job-exit $job --inherit-variable job
         # beep
         echo -n \a
         functions -e _notify_job_$job
      end
   end # function

   function batdiff -d "Running git diff and display using bat"
      git diff --name-only --diff-filter=d | xargs bat --diff
   end

   # TODO
   # battail : tail -f /var/log/pacman.log | bat --paging=never -l log
   # batshow : git show v0.6.0:src/main.rs | bat -l rs
   # see https://github.com/sharkdp/bat

   # For bash or zsh
   # fd() {
   #     preview="git diff $@ --color=always -- {-1}"
   #     git diff $@ --name-only | fzf -m --ansi --preview $preview
   # }
   function gdiff -d ""
      # Comparing your current branch to master
      #     gdiff <branch>
      # Comparing the changes between two commits
      #     gdiff <commit1>..<commit2>
      # Note that this works from the root of the git repository
      git diff $argv --name-only | fzf -m -m --ansi --preview "git diff $argv --color=always -- {-1}"
   end

   #---------------------- powerline ----------------------
   set POWER_LINE_PATH /usr/share/powerline
   set fish_function_path $fish_function_path $POWER_LINE_PATH/bindings/fish
   source $POWER_LINE_PATH/bindings/fish/powerline-setup.fish
   powerline-setup

   #---------------------- git ---------------------
   function gclone -d "Clone a git repository from Victory"
      set num (count $argv)
      if test $num = 1
         set project $argv[1]
         command git clone athichart@victorybattleship.local:/Users/athichart/Google\ Drive/git/$project
      else
         echo "usage: gclone <repository>"
      end
   end  # funciton

   alias gts='git status'
   alias gtl='git log'
   alias gtpush='git push origin master'
   alias gtpull='git pull origin master'

   #---------------------- Aliases ---------------------
   alias clean='find . -type f \( -name ".*~" -o -name "*~" -o -name "a.out" -o -name "core" -o -name "*.pyc" -o -name "*.class" \) -delete'
   alias fzf='fzf --preview "bat {-1} --color=always"'
   # Replacing ls with exa
   alias ls='exa'
   # exa options : --extended --only-dirs
   alias ll='exa -aa -l -g -h --git --modified --time-style=long-iso -H --classify --icons'
   alias la='exa -a'
   alias reload='source ~/.config/fish/config.fish'
   alias tl='tmux ls'
   alias ta='tmux attach -dt'
   alias vi='vim'

   #---------------------- Variables ---------------------
   set -gx RUSTUP_HOME "$HOME/.rustup"
   set -gx CARGO_HOME "$HOME/.cargo"
   set -gx PKG_CONFIG_PATH /usr/local/lib/pkgconfig $PKG_CONFIG_PATH
   set -gx PATH "$HOME/bin" "$HOME/Workspace/scripts" "$CARGO_HOME/bin" $PATH;
   set -gx EDITOR vim
   set -gx VISUAL vim

   set -gx myver 1.0
   echo "Loading my fish startup script $myver"
   #neofetch
end
