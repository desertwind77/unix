# We need this guard; otherwise, scp will fail.
if status is-interactive
    #---------------------- Function ---------------------
	function mkcd -d "Create a directory and set CWD"
      command mkdir $argv
      if test $status = 0
         switch $argv[ ( count $argv ) ]
            case '-*'
            case '*'
               cd $argv[ ( count $argv ) ]
               return
         end
      end
   end  # funciton

   function cprint -d "Print a source code file in pdf"
      for src in $argv
         echo $src
         a2ps --columns=1 --portrait --media=Letter --no-header --borders=0 -o $src.ps $src
         ps2pdf $src.ps $src.pdf
         rm $src.ps
      end
   end

   function cgen -d "Generate cscope database"
      # cscope can search for all functions that call a particular funciton while ctags
      # does not support this feature.
      echo "Finding relevant source files..."
      find . -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" > cscope.files

      echo "Building cscope database..."
      # -q : build a faster, but larger database
      # -R : search recursively
      # -b : build the database without starting cscope browser
      # -i <file> : specify the list of source files
      cscope -q -R -b -i cscope.files

      # To luanch cscope, run "cscope -d". "-d" tells cscope not to regenerate the database.
      # To exit cscope, type Ctrl-d
      # Ctrl-b    to search for previous terms again
      # Ctrl-c    to toggle case-sensitive search
   end

   function ckernelgen -d "Generate the cscope database for a Linux kernel"
      echo "Finding relevant source files..."
      find .                                                                  \
         -path "$LNX/arch/*" ! -path "$LNX/arch/x86*" -prune -o               \
         -path "$LNX/include/asm-*" ! -path "$LNX/include/asm-generic*"       \
                                    ! -path "$LNX/include/asm-x86*" -prune -o \
         -path "$LNX/tmp*" -prune -o                                          \
         -path "$LNX/Documentation*" -prune -o                                \
         -path "$LNX/scripts*" -prune -o                                      \
         -name "*.[chxsS]" -print > $LNX/cscope.files

      echo "Building cscope database..."
      time cscope -q -k -b -i cscope.files
   end

   function notify -d "Beep when the last background job finish"
      set -l job ( jobs -l -g )
      # Disabling the following line; otherwise, this function will not work
      #or begin; echo "There are no jobs" >&2; return 1; end

      function _notify_job_$job --on-job-exit $job --inherit-variable job
         # beep
         echo -n \a
         functions -e _notify_job_$job
      end
   end # function

   function batdiff -d "Running git diff and display using bat"
      git diff --name-only --diff-filter=d | xargs bat --diff
   end

   # TODO
   # battail : tail -f /var/log/pacman.log | bat --paging=never -l log
   # batshow : git show v0.6.0:src/main.rs | bat -l rs
   # see https://github.com/sharkdp/bat

   # For bash or zsh
   # fd() {
   #     preview="git diff $@ --color=always -- {-1}"
   #     git diff $@ --name-only | fzf -m --ansi --preview $preview
   # }
   function gdiff -d ""
      # Comparing your current branch to master
      #     gdiff <branch>
      # Comparing the changes between two commits
      #     gdiff <commit1>..<commit2>
      # Note that this works from the root of the git repository
      git diff $argv --name-only | fzf -m -m --ansi --preview "git diff $argv --color=always -- {-1}"
   end

   #---------------------- home brew ---------------------
   set -gx HOMEBREW_PREFIX "/opt/homebrew";
   set -gx HOMEBREW_CELLAR "/opt/homebrew/Cellar";
   set -gx HOMEBREW_REPOSITORY "/opt/homebrew";
   set -q PATH; or set PATH ''; set -gx PATH "/opt/homebrew/bin" "/opt/homebrew/sbin" $PATH;
   set -q MANPATH; or set MANPATH ''; set -gx MANPATH "/opt/homebrew/share/man" $MANPATH;
   set -q INFOPATH; or set INFOPATH ''; set -gx INFOPATH "/opt/homebrew/share/info" $INFOPATH;

   #---------------------- Aliases ---------------------
   # fzf
   alias fzf='fzf --preview "bat {-1} --color=always"'

   # exa
   alias ls='exa --icons'
   alias ll='exa -aa -l -g -h --git --modified --time-style=long-iso -H --classify --icons'
   alias la='exa --icons -a'

   # git
   alias gts='git status'
   alias gtl='git log'
   alias gtd='git diff | bat'
   alias gtpush='git push origin master'
   alias gtpull='git pull origin master'

   # tmux
   alias tl='tmux ls'
   alias ta='tmux attach -dt'

   # misc
   alias aex='audiotag extract'
   alias acv='audiotag convert'
   alias acl='audiotag cleanup'
   alias acp='audiotag -v copy'
   alias clean='find . -type f \( -name ".*~" -o -name "*~" -o -name "a.out" -o -name "core" -o -name "*.pyc" -o -name "*.class" \) -delete'
   alias reload='source ~/.config/fish/config.fish'
   alias vi='vim'
   alias list='glow -w 100 $HOME/Workspace/scripts/readme.md'
   alias pytestenv='source ~/Workspace/python_venv/test_env/bin/activate.fish'
   alias ctagsgen='ctags -R *'
   alias vimkeys='glow -p ~/Workspace/github/unix/notebook/Vim.md'
   alias tmuxkeys='glow -p ~/Workspace/github/unix/notebook/Tmux.md'

   #---------------------- Variables ---------------------
   set -gx PATH "$HOME/Workspace/scripts" "$HOME/Workspace/bin" $PATH;
   set -gx CSCOPE_EDITOR vim
   set -gx EDITOR vim
   set -gx VISUAL vim

   zoxide init fish | source
   eval (tmuxifier init -)

   neofetch
   quote
   echo ""
   vocab
end
